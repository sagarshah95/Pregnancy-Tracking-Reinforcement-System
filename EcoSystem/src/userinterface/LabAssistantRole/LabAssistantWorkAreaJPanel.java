/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.LabAssistantRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.MCHBEnterprise;
import Business.Network.Network;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.VitalSigns.VitalSigns;
import Business.VitalSigns.VitalSignsHistory;
import Business.WorkQueue.LabTestWorkRequest;
//import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class LabAssistantWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private LabOrganization labOrganization;
    private VitalSignsHistory vitalSignsHistory;
    double defaultMaxBP = 140;
    double defaultMinBP = 90;
    double defaultMaxTemp =102.2;
    double defaultMinTemp = 95;
    double defaultMaxhaemoglobin =14;
    double defaultMinhaemoglobin =10;
    int defaultMaxPulse =90;
    int defaultMinPulse = 70;
    int defaultMaxResp = 18;
    int defaultMinResp = 15;
    
    
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     * @param userProcessContainer
     * @param account
     * @param organization
     * @param business
     */
    private Enterprise enterprise;
    private EcoSystem system;
    public LabAssistantWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise,EcoSystem system) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        //this.business = business;
        this.system=system;
        this.enterprise=enterprise;
        this.labOrganization = (LabOrganization)organization;
        this.vitalSignsHistory = new VitalSignsHistory();
        maxBloodPressureTextField.setText(defaultMaxBP+"");
        minBloodPressureTextField.setText(defaultMinBP+"");
        maxHaemoglobinTextField.setText(defaultMaxhaemoglobin+"");
        minHaemoglobinTextField.setText(defaultMinhaemoglobin+"");
        maxPulseTextField.setText(defaultMaxPulse+"");
        minPulseTextField.setText(defaultMinPulse+"");
        maxTempTextField.setText(defaultMaxTemp+"");
        minTempTextField.setText(defaultMinTemp+"");
        maxRespTextField.setText(defaultMaxResp+"");
        minRespTextField.setText(defaultMinResp+"");
        for(Employee e : organization.getEmployeeDirectory().getEmployeeList())
             if(e.getName().equals(userAccount.getUsername())){
        valueLabel.setText(e.getName());
             }
        //valueLabel.setText(organization.getEmployeeDirectory().getEmployeeList().toString());
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : labOrganization.getWorkQueue().getWorkRequestList()){
            if(request instanceof LabTestWorkRequest){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getSender()== null ? null : request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
           // if(request.getStatus().equals("Completed")){
            //   row[3] ="Completed";
            //}
           // else{
            row[3] = request.getStatus() == null ? null : request.getStatus();
           // }
            row[4] = request.getRequestDate();
            row[5] = request.getResolveDate();
            model.addRow(row);
            }
           
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        addVitalBtn = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        viewPatientBtn = new javax.swing.JButton();
        criticalBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxBloodPressureTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        minBloodPressureTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        maxTempTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        minTempTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        maxHaemoglobinTextField = new javax.swing.JTextField();
        minHaemoglobinTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        maxPulseTextField = new javax.swing.JTextField();
        minPulseTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        maxRespTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        minRespTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();

        jLabel6.setText("jLabel6");

        setBackground(new java.awt.Color(204, 255, 204));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setBackground(new java.awt.Color(0, 0, 0));
        workRequestJTable.setForeground(new java.awt.Color(255, 255, 255));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "DateReceived", "DateResolved"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 560, 140));

        assignJButton.setBackground(new java.awt.Color(0, 0, 0));
        assignJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        assignJButton.setForeground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 150, -1, -1));

        addVitalBtn.setBackground(new java.awt.Color(0, 0, 0));
        addVitalBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addVitalBtn.setForeground(new java.awt.Color(255, 255, 255));
        addVitalBtn.setText("Add Vital Signs");
        addVitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalBtnActionPerformed(evt);
            }
        });
        add(addVitalBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, -1, -1));

        refreshJButton.setBackground(new java.awt.Color(0, 0, 0));
        refreshJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        refreshJButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 90, 110, -1));

        viewPatientBtn.setBackground(new java.awt.Color(0, 0, 0));
        viewPatientBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        viewPatientBtn.setForeground(new java.awt.Color(255, 255, 255));
        viewPatientBtn.setText("View Patient Reports");
        viewPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientBtnActionPerformed(evt);
            }
        });
        add(viewPatientBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, -1, -1));

        criticalBtn.setBackground(new java.awt.Color(0, 0, 0));
        criticalBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        criticalBtn.setForeground(new java.awt.Color(255, 255, 255));
        criticalBtn.setText("Critical Patients");
        criticalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criticalBtnActionPerformed(evt);
            }
        });
        add(criticalBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("LabAssistant Work Area");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 290, 20));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        jLabel2.setText("***Ideal Vital Signs Range for Pregnant Ladies:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Max Blood Pressure");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, -1));
        add(maxBloodPressureTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 320, 40, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Min Blood Pressure");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, -1));
        add(minBloodPressureTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 370, 40, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Max Temperature");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 320, -1, -1));
        add(maxTempTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 320, 40, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Min Temperature");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 370, -1, -1));

        minTempTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minTempTextFieldActionPerformed(evt);
            }
        });
        add(minTempTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 370, 40, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText(" Max Haemoglobin");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, -1, -1));
        add(maxHaemoglobinTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 320, 40, -1));
        add(minHaemoglobinTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 370, 40, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Min Haemoglobin");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 370, 110, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Max Pulse ");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Min Pulse");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, -1, -1));
        add(maxPulseTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 430, 40, -1));
        add(minPulseTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 470, 40, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Max Respiration Rate");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 430, -1, -1));
        add(maxRespTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 430, 40, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Min Respiration Rate");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 470, 120, -1));
        add(minRespTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 470, 40, -1));

        jLabel14.setText("degrees Fahrenheit");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 300, 120, 20));

        jLabel15.setText("g/dL");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 300, -1, -1));

        jLabel16.setText("beats/min");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 410, -1, -1));

        jLabel17.setText("breaths/min");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 410, -1, -1));

        jLabel18.setText("systolic");
        add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 300, -1, -1));

        jLabel19.setText("diastolic");
        add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 350, -1, -1));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel20.setText("Lab Assistant");
        add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, -1, -1));

        valueLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 60, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        LabTestWorkRequest request = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        Organization org = null;
        for(WorkRequest labrequest : labOrganization.getWorkQueue().getWorkRequestList()){
            if(request.getName().equals(labrequest.getMessage())){
                labrequest.setReceiver(userAccount);
                labrequest.setStatus("Pending");
                populateTable();
            }
        }
        
        
     /*   for (Network network : business.getNetworkList()) {
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (enterprise instanceof MCHBEnterprise) {
                            if(this.enterprise.getName().equals(enterprise.getName())){
                            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                             //  for (patient.getSender(): enterprise.getOrganizationDirectory().getOrganizationList()){
                                   if (organization instanceof LabOrganization) {
                                    org = organization;
                                    break;
                                }
                                                     
                           }
                        }  
                        }

                    }
                }
                if (org != null) {
                    //System.out.println("userinterface.Farmer.RequestDoctorTreatmentWorkAreaJPanel.requestTestJButtonActionPerformed()");
                  //  if (org.getEmployeeDirectory().getEmployeeList()
                  for  org.getWorkQueue().getWorkRequestList();
                    userAccount.getWorkQueue().getWorkRequestList().add(labTestWorkRequest);

                    JOptionPane.showMessageDialog(null, "You have successfully submitted your treatment request !", "Information", JOptionPane.INFORMATION_MESSAGE);
                }*/
        
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void addVitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalBtnActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
       
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a patient to record the vital signs");
            return;
        }
        
        LabTestWorkRequest request = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        //Patient patient = (Patient)workRequestJTable.getValueAt(selectedRow, 0);
     if(request.getReceiver()!=null){
        request.setStatus("Lab Processing");
        populateTable();
        AddPatientVitalJPanel addPatientjpanel = new AddPatientVitalJPanel(userProcessContainer, request,vitalSignsHistory,userAccount,labOrganization,enterprise,system);
        userProcessContainer.add("AddPatientVitalJPanel", addPatientjpanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
     }
     else
     {  
          JOptionPane.showMessageDialog(null,"Please first Assign the Patient");
     }
        
        
    }//GEN-LAST:event_addVitalBtnActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void viewPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientBtnActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
      /*  if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a patient to view the Report");
            return;
        }*/
        LabTestWorkRequest request = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
       // Patient patient = (Patient)workRequestJTable.getValueAt(selectedRow, 0);
        if(request.getStatus().equals("Lab Processing")){
            populateTable();
       // Patient patient = (Patient)workRequestJTable.getValueAt(selectedRow, 0);
        ViewPatientReportJPanel viewPatientjpanel = new ViewPatientReportJPanel(userProcessContainer,vitalSignsHistory,request,userAccount,labOrganization,enterprise,system);
        userProcessContainer.add("ViewPatientReportJPanel", viewPatientjpanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
         if(request.getStatus().equals("Completed")){
            populateTable();
       // Patient patient = (Patient)workRequestJTable.getValueAt(selectedRow, 0);
        ViewPatientReportJPanel viewPatientjpanel = new ViewPatientReportJPanel(userProcessContainer,vitalSignsHistory,request,userAccount,labOrganization,enterprise,system);
        userProcessContainer.add("ViewPatientReportJPanel", viewPatientjpanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
         if(request.getStatus().equals("Pending"))
        {
            JOptionPane.showMessageDialog(null, "Please add Vital Signs for patient");
        }
        
    }//GEN-LAST:event_viewPatientBtnActionPerformed

    private void criticalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criticalBtnActionPerformed
       String maxBP =maxBloodPressureTextField.getText();
        try{
            Double.parseDouble(maxBP);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, maxBP+"is not a valid number");
        }
        double defaultMaxBP = Double.parseDouble(maxBP);
        maxBloodPressureTextField.setText(defaultMaxBP+"");
        String minBP =minBloodPressureTextField.getText();
        try{
            Double.parseDouble(minBP);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, minBP+"is not a valid number");
        }
        double defaultMinBP = Double.parseDouble(minBP);
        minBloodPressureTextField.setText(defaultMinBP+"");
        String maxTemp =maxTempTextField.getText();
        try{
            Double.parseDouble(maxTemp);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, maxTemp+"is not a valid number");
        }
        double defaultMaxTemp= Double.parseDouble(maxTemp);
        maxTempTextField.setText(defaultMaxTemp+"");
        String minTemp =minTempTextField.getText();
        try{
            Double.parseDouble(minTemp);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, minTemp+"is not a valid number");
        }
        double defaultMinTemp = Double.parseDouble(minTemp);
        minTempTextField.setText(defaultMinTemp+"");
        String maxHae =maxHaemoglobinTextField.getText();
        try{
            Double.parseDouble(maxHae);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, maxHae+"is not a valid number");
        }
        double defaultMaxHae= Double.parseDouble(maxHae);
        maxHaemoglobinTextField.setText(defaultMaxHae+"");
        String minHae =minHaemoglobinTextField.getText();
        try{
            Double.parseDouble(minHae);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, minHae+"is not a valid number");
        }
        double defaultminHae = Double.parseDouble(minHae);
        minHaemoglobinTextField.setText(defaultminHae+"");
        String maxPulse =maxPulseTextField.getText();
        try{
            Integer.parseInt(maxPulse);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, maxPulse+"is not a valid number");
        }
        int defaultMaxPulse= Integer.parseInt(maxPulse);
        maxPulseTextField.setText(defaultMaxPulse+"");
        String minPulse =minPulseTextField.getText();
        try{
           Integer.parseInt(minPulse);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, minPulse+"is not a valid number");
        }
        int defaultminPulse = Integer.parseInt(minPulse);
        minPulseTextField.setText(defaultminPulse+"");
        String maxResp =maxRespTextField.getText();
        try{
            Integer.parseInt(maxResp);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, maxResp+"is not a valid number");
        }
        int defaultMaxResp= Integer.parseInt(maxResp);
        maxRespTextField.setText(defaultMaxResp+"");
        String minResp =minRespTextField.getText();
        try{
            Integer.parseInt(minResp);
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, minResp+"is not a valid number");
        }
        int defaultminResp = Integer.parseInt(minResp);
        minRespTextField.setText(minResp+"");
        CriticalPatientJPanel criticalPatientJPanel = new CriticalPatientJPanel(userProcessContainer,vitalSignsHistory,userAccount,labOrganization,enterprise,system,defaultMaxBP,defaultMinBP,defaultMaxHae,defaultminHae,defaultMaxTemp,defaultMinTemp,defaultMaxPulse,defaultminPulse,defaultMaxResp,defaultminResp);
        userProcessContainer.add("CriticalPatientJPanel", criticalPatientJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_criticalBtnActionPerformed

    private void minTempTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minTempTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minTempTextFieldActionPerformed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseMoved

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVitalBtn;
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton criticalBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maxBloodPressureTextField;
    private javax.swing.JTextField maxHaemoglobinTextField;
    private javax.swing.JTextField maxPulseTextField;
    private javax.swing.JTextField maxRespTextField;
    private javax.swing.JTextField maxTempTextField;
    private javax.swing.JTextField minBloodPressureTextField;
    private javax.swing.JTextField minHaemoglobinTextField;
    private javax.swing.JTextField minPulseTextField;
    private javax.swing.JTextField minRespTextField;
    private javax.swing.JTextField minTempTextField;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JButton viewPatientBtn;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
