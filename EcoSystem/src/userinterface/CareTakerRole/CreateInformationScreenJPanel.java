/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CareTakerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.MCHBEnterprise;
import Business.Network.Network;
import Business.Organization.CareTakerOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Patient.PatientDirectory;
import Business.UserAccount.UserAccount;
import Business.Employee.Employee;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author my pc
 */
public class CreateInformationScreenJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateInformationScreenJPanel
     */
    private JPanel userprocessContainer;
    private UserAccount userAccount;
    private CareTakerOrganization careTakerOrganization;
    Organization org;
    private Enterprise enterprise;
    private EcoSystem business;
    private PatientDirectory patientDirectory;
    public CreateInformationScreenJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, EcoSystem business,PatientDirectory patientDirectory) {
        initComponents();
        this.userprocessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.org = organization;
       // this.careTakerOrganization = new CareTakerOrganization();
      this.careTakerOrganization = (CareTakerOrganization) org;
       // System.out.println("caretaker org=" + this.careTakerOrganization);
        this.enterprise = enterprise;
        this.business = business;
     this.patientDirectory=patientDirectory;
        popEntryFormTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dobTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        domTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        contactNameTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        contactnumTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        locationTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        entryFormJTable = new javax.swing.JTable();
        createRecordBtn = new javax.swing.JButton();
        eligibilityComboBox = new javax.swing.JComboBox<>();
        ispregnantComboBox = new javax.swing.JComboBox<>();
        referToLabBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        creationDateTextField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Patients Entry Form Screen");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 350, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 50, -1));

        nameTextField.setText("gt");
        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });
        add(nameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 130, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Date of Birth");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        dobTextField.setText("66");
        dobTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dobTextFieldActionPerformed(evt);
            }
        });
        add(dobTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 130, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Date of Marriage");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 100, -1));

        domTextField.setText("55456");
        add(domTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 130, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Emergency Contact Name");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 150, -1));

        contactNameTextField.setText("gygh");
        add(contactNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, 120, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Emergency Contact Number");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 160, -1));

        contactnumTextField.setText("6756");
        contactnumTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactnumTextFieldActionPerformed(evt);
            }
        });
        add(contactnumTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 150, 120, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Pregnancy Eligibility");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 130, 20));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("IsPregnant");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Location");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 70, -1));

        locationTextField.setText("gf");
        add(locationTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 190, 120, -1));

        entryFormJTable.setBackground(new java.awt.Color(0, 0, 0));
        entryFormJTable.setForeground(new java.awt.Color(255, 255, 255));
        entryFormJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Date of Marriage", "Emargency Contact Name", "IsPregnant", "Status", "Sender"
            }
        ));
        jScrollPane1.setViewportView(entryFormJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 620, 90));

        createRecordBtn.setBackground(new java.awt.Color(0, 0, 0));
        createRecordBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        createRecordBtn.setForeground(new java.awt.Color(255, 255, 255));
        createRecordBtn.setText("Create");
        createRecordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRecordBtnActionPerformed(evt);
            }
        });
        add(createRecordBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 100, 120, -1));

        eligibilityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        eligibilityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eligibilityComboBoxActionPerformed(evt);
            }
        });
        add(eligibilityComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, -1, -1));

        ispregnantComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        add(ispregnantComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, -1, -1));

        referToLabBtn.setBackground(new java.awt.Color(0, 0, 0));
        referToLabBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        referToLabBtn.setForeground(new java.awt.Color(255, 255, 255));
        referToLabBtn.setText("Refer To Lab");
        referToLabBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referToLabBtnActionPerformed(evt);
            }
        });
        add(referToLabBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 360, 130, -1));

        backBtn.setBackground(new java.awt.Color(0, 0, 0));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("<<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Creation Date");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, -1, -1));
        add(creationDateTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 230, 120, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void dobTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dobTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dobTextFieldActionPerformed

    private void createRecordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRecordBtnActionPerformed
        // TODO add your handling code here:
        String Patientname = nameTextField.getText();
         try{
              if(Patientname.equals("")){
                 throw new Exception("Patient Name cannot be Blank"); 
              }
              if(!Patientname.matches("[a-zA-Z0-9_]+")){
                  throw new Exception("Please enter Valid Patient Name(A-Z/a-z)");
              }
                
           }
        catch (Exception exe)
        {   
            JOptionPane.showMessageDialog(null,"Please enter Valid Patient Name(A-Z/a-z)" );
            return;
        }
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");
        String dateofbirth = dobTextField.getText();
        try {

            Date dateformat = formatter.parse(dateofbirth);
           // System.out.println(formatter.format(dateformat));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please Enter Date of Birth in dd-MMM-yyyy Format");
            return;
        }
        String dateofmarriage = domTextField.getText();
         try {

            Date dateformat = formatter.parse(dateofmarriage);
           // System.out.println(formatter.format(dateformat));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please Enter Date of Marriage in dd-MMM-yyyy Format");
            return;
        }
        String emergencyContact = contactNameTextField.getText();
        double emergencyNumber = Double.parseDouble(contactnumTextField.getText());
        String city = locationTextField.getText();
        String eligibility = eligibilityComboBox.getSelectedItem().toString();
        String ispregnant = ispregnantComboBox.getSelectedItem().toString();
        String DateCreation=creationDateTextField.getText();

        Patient patient = patientDirectory.createPatient(Patientname, dateofbirth, dateofmarriage, emergencyContact, emergencyNumber, city, eligibility, ispregnant);
        LabTestWorkRequest labWorkRequest = new LabTestWorkRequest();
        patient.setStatus("InQueue");
        labWorkRequest.setName(Patientname);
        labWorkRequest.setDateOfBirth(dateofbirth);
        labWorkRequest.setDateOfMarriage(dateofmarriage);
        labWorkRequest.setEmergencyContactName(emergencyContact);
        labWorkRequest.setEmergencyContactNumber(emergencyNumber);
        labWorkRequest.setCity(city);
        labWorkRequest.setPregnancyEligibility(eligibility);
        labWorkRequest.setIsPregnant(ispregnant);
        labWorkRequest.setStatus("InQueue");
        labWorkRequest.setRequestDate(labWorkRequest.getDate());
        labWorkRequest.setCreationDate(DateCreation);
        labWorkRequest.setMessage(labWorkRequest.getName());
        Organization org= null;
        for (Network network : business.getNetworkList()) {
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (enterprise instanceof MCHBEnterprise) {
                             if(this.enterprise.getName().equals(enterprise.getName())){
                            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                if (organization instanceof CareTakerOrganization) {
                                    org = organization;
                                    break;
                                }
                            }
                           }
                        }

                    }
                }
                if (org != null) {
                    //System.out.println("userinterface.Farmer.FarmerComplaintRegistrationJPanel.requestTestJButtonActionPerformed()");
                    org.getWorkQueue().getWorkRequestList().add(labWorkRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(labWorkRequest);

                    JOptionPane.showMessageDialog(null, "You have successfully added Patient Record !", "Information", JOptionPane.INFORMATION_MESSAGE);

                }
             
        popEntryFormTable();
        nameTextField.setText("");
        dobTextField.setText("");
        domTextField.setText("");
        contactNameTextField.setText("");
        contactnumTextField.setText("");
        locationTextField.setText("");
        eligibilityComboBox.setSelectedItem("Yes");
        ispregnantComboBox.setSelectedItem("Yes");
        
    }//GEN-LAST:event_createRecordBtnActionPerformed
    public void popEntryFormTable() {
        DefaultTableModel model = (DefaultTableModel) entryFormJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : careTakerOrganization.getWorkQueue().getWorkRequestList()) {
           // if(this.userAccount.getUsername().equals("CTA")){
            Object[] row = new Object[6];
            LabTestWorkRequest labTestWorkRequest = (LabTestWorkRequest) request;
            row[0] = labTestWorkRequest;
            row[1] = labTestWorkRequest.getDateOfMarriage();
            row[2] = labTestWorkRequest.getEmergencyContactName();
            row[3] = labTestWorkRequest.getIsPregnant();
            row[4] = labTestWorkRequest.getStatus();
            row[5] = labTestWorkRequest.getSender();

            model.addRow(row);
           // }
        } 

      /* for (Patient p : patientDirectory.getPatientList()){
            Object row[] = new Object[5];
            row[0] = p;
            row[1] = p.getDateOfMarriage();
            row[2] = p.getEmergencyContactName();
            row[3] = p.getIsPregnant();
            row[4] = p.getStatus();
            ((DefaultTableModel) entryFormJTable.getModel()).addRow(row);
      
        
    }*/
    }

    private void eligibilityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eligibilityComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eligibilityComboBoxActionPerformed

    private void contactnumTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactnumTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactnumTextFieldActionPerformed

    private void referToLabBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referToLabBtnActionPerformed
        int selectedRow = entryFormJTable.getSelectedRow();
      if(selectedRow<0){
          JOptionPane.showMessageDialog(null, "Please select a row from table");
      }else{
          //Patient patient = (Patient)entryFormJTable.getValueAt(selectedRow, 0);
          LabTestWorkRequest labTestWorkRequest = (LabTestWorkRequest)entryFormJTable.getValueAt(selectedRow, 0);
          labTestWorkRequest.setSender(userAccount);
          labTestWorkRequest.setStatus("Sent");
          labTestWorkRequest.setMessage(labTestWorkRequest.getName());
          //labTestWorkRequest.setMessage();
         // patient.setPatient(patient);
          Organization org = null;
        /*  List<Employee> care = new ArrayList<Employee>();
          for(Network network:business.getNetworkList()){
              for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                  if (enterprise instanceof MCHBEnterprise){
                     if(this.enterprise.getName().equals(enterprise.getName())){
                     for (Organization organization:enterprise.getOrganizationDirectory().getOrganizationList()){
                         care= organization.getEmployeeDirectory().addEmployee((ArrayList<Employee>) care);
                         
                         
                     }
                     }
                  }
              }
          }*/
             
          for (Network network : business.getNetworkList()) {
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (enterprise instanceof MCHBEnterprise) {
                            if(this.enterprise.getName().equals(enterprise.getName())){
                            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                             //  for (patient.getSender(): enterprise.getOrganizationDirectory().getOrganizationList()){
                                   if (organization instanceof LabOrganization) {
                                    org = organization;
                                    break;
                                }
                                                     
                           }
                        }  
                        }

                    }
                }
                if (org != null) {
                    //System.out.println("userinterface.Farmer.RequestDoctorTreatmentWorkAreaJPanel.requestTestJButtonActionPerformed()");
                  //  if (org.getEmployeeDirectory().getEmployeeList()
                    org.getWorkQueue().getWorkRequestList().add(labTestWorkRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(labTestWorkRequest);

                    JOptionPane.showMessageDialog(null, "You have successfully submitted your treatment request !", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
           popEntryFormTable();
          
          
      }
    }//GEN-LAST:event_referToLabBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userprocessContainer.remove(this);
        CardLayout layout = (CardLayout) userprocessContainer.getLayout();
        layout.previous(userprocessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField contactNameTextField;
    private javax.swing.JTextField contactnumTextField;
    private javax.swing.JButton createRecordBtn;
    private javax.swing.JTextField creationDateTextField;
    private javax.swing.JTextField dobTextField;
    private javax.swing.JTextField domTextField;
    private javax.swing.JComboBox<String> eligibilityComboBox;
    private javax.swing.JTable entryFormJTable;
    private javax.swing.JComboBox<String> ispregnantComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton referToLabBtn;
    // End of variables declaration//GEN-END:variables
}
